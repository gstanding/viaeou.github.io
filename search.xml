<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BFPRT算法</title>
    <url>/viaeou.github.io/2020/12/06/BFPRT%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>BFPRT算法替代了快排利用随机数的操作</p>
</blockquote>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Manacher算法</title>
    <url>/viaeou.github.io/2020/12/07/Manacher%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p>基本概念</p>
</blockquote>
<ol>
<li>回文半径、回文直径、回文区域</li>
<li>回文半径数组</li>
<li>回文最右边界r 初始化-1</li>
<li>r对应的中心点c</li>
</ol>
<blockquote>
<p>伪代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxLen</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">	str -&gt; strx</span><br><span class="line">	<span class="keyword">int</span> r = -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;strx.length;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(i在r外) &#123;</span><br><span class="line">			暴力</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (i的对称点的回文区域在l。。r内) &#123;</span><br><span class="line">				i的回文半径=i的对称点的回文半径</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span>(i的对称点的回文区域的左边界刚好在l) &#123;</span><br><span class="line">				i的回文半径=i到r的距离</span><br><span class="line">			&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">				r继续往外扩</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/viaeou.github.io/2020/11/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>spring</title>
    <url>/viaeou.github.io/2020/11/30/spring/</url>
    <content><![CDATA[<h3 id="spring的一些概念"><a href="#spring的一些概念" class="headerlink" title="spring的一些概念"></a>spring的一些概念</h3><h4 id="spring-ioc"><a href="#spring-ioc" class="headerlink" title="spring ioc"></a>spring ioc</h4><p>IOC(Invertion of Control)，控制反转的设计思想</p>
<blockquote>
<p>理解控制反转应该理解：“谁控制谁，控制什么，为什么是反转”</p>
</blockquote>
<h5 id="谁控制谁，控制什么"><a href="#谁控制谁，控制什么" class="headerlink" title="谁控制谁，控制什么"></a>谁控制谁，控制什么</h5><p>传统的，在程序中手动创建依赖对象。spring中，IOC容器控制对象的创建，控制</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>任务调度器</title>
    <url>/viaeou.github.io/2020/12/05/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>给你一个用字符数组 tasks 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。<br>然而，两个 相同种类 的任务之间必须有长度为整数 n 的冷却时间，因此至少有连续 n 个单位时间内 CPU 在执行不同的任务，或者在待命状态。你需要计算完成所有任务所需要的最短时间 。</p>
</blockquote>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/task-scheduler">https://leetcode-cn.com/problems/task-scheduler</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leastInterval</span><span class="params">(<span class="keyword">char</span>[] tasks, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 存储字符出现的频率</span></span><br><span class="line">        Map&lt;Character, Integer&gt; freq = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> task : tasks) &#123;</span><br><span class="line">            freq.put(task, freq.getOrDefault(task, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 任务的种类数</span></span><br><span class="line">        <span class="keyword">int</span> m = freq.size();</span><br><span class="line">        <span class="comment">// 存储每个任务下次可以执行的时间</span></span><br><span class="line">        List&lt;Integer&gt; nextValidTime= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 存储每个任务的剩余执行次数</span></span><br><span class="line">        List&lt;Integer&gt; restCount = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化两个数组</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entries = freq.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry: entries) &#123;</span><br><span class="line">            nextValidTime.add(<span class="number">1</span>);</span><br><span class="line">            restCount.add(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后续的操作只需基于两种数组</span></span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tasks.length; i++) &#123;</span><br><span class="line">            ++time;</span><br><span class="line">            <span class="keyword">int</span> minNextValidTime = Integer.MAX_VALUE;</span><br><span class="line">            <span class="comment">// 选出下次生效时间最早的进行操作</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (restCount.get(j) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    minNextValidTime = Math.min(minNextValidTime, nextValidTime.get(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将当前时间设置为下次任务可执行的时间，避免空轮训</span></span><br><span class="line">            time = Math.max(minNextValidTime, time);</span><br><span class="line">            <span class="comment">// 下次任务的选择，下标</span></span><br><span class="line">            <span class="keyword">int</span> bestChoose = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(restCount.get(j) != <span class="number">0</span> &amp;&amp; nextValidTime.get(j) &lt;= time) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (bestChoose == -<span class="number">1</span> || restCount.get(j) &gt; restCount.get(bestChoose)) &#123;</span><br><span class="line">                        bestChoose = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            nextValidTime.set(bestChoose, time + n +<span class="number">1</span>);</span><br><span class="line">            restCount.set(bestChoose, restCount.get(bestChoose) -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>分割数组为连续子序列</title>
    <url>/viaeou.github.io/2020/12/04/%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84%E4%B8%BA%E8%BF%9E%E7%BB%AD%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<blockquote>
<ol start="659">
<li>给你一个按升序排序的整数数组 num（可能包含重复数字），请你将它们分割成一个或多个子序列，其中每个子序列都由连续整数组成且长度至少为 3 。<br>如果可以完成上述分割，则返回 true ；否则，返回 false 。</li>
</ol>
</blockquote>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="">https://leetcode-cn.com/problems/split-array-into-consecutive-subsequences</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPossible</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, PriorityQueue&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, PriorityQueue&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(x)) &#123;</span><br><span class="line">                map.put(x, <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(x-<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> prevLength = map.get(x - <span class="number">1</span>).poll();</span><br><span class="line">                <span class="keyword">if</span> (map.get(x - <span class="number">1</span>).isEmpty()) &#123;</span><br><span class="line">                    map.remove(x - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                map.get(x).offer(prevLength + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.get(x).offer(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, PriorityQueue&lt;Integer&gt;&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, PriorityQueue&lt;Integer&gt;&gt; entry : entrySet) &#123;</span><br><span class="line">            PriorityQueue&lt;Integer&gt; queue = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (queue.peek() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈和滑动窗</title>
    <url>/viaeou.github.io/2020/12/02/%E5%8D%95%E8%B0%83%E6%A0%88%E5%92%8C%E6%BB%91%E5%8A%A8%E7%AA%97/</url>
    <content><![CDATA[<blockquote>
<p>什么是滑动窗</p>
</blockquote>
<p>假设窗口两端的索引分别为L、R，左端索引增加，元素从窗口出去；右端索引增加，元素从右侧进入窗口；且一直有L&lt;=R。</p>
<blockquote>
<p>什么是单调栈</p>
</blockquote>
<p>元素从大到小或从小到大在栈内存储的栈结构</p>
]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>首篇</title>
    <url>/viaeou.github.io/2020/11/29/%E9%A6%96%E7%AF%87/</url>
    <content><![CDATA[<blockquote>
<p>第一篇博客来得有些晚，但聊胜于无。希望能够坚持分享，技术积累、想法、吐槽不限。</p>
</blockquote>
]]></content>
      <tags>
        <tag>想法</tag>
      </tags>
  </entry>
</search>
